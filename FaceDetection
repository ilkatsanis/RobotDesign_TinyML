# import modules
import cv2
import serial
import time

faceCascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')  # load cascade classifier
cap = cv2.VideoCapture(1)  # change to 1 to use internal webcam
port = "/dev/cu.usbmodem11101"  # port of Arduino. Change accordingly.
try:
    Arduino = serial.Serial(port)  # connection to Arduino
    print("Connect to Arduino...")
except:
    print("Connection failed")

time.sleep(1)

while True:
    success, img = cap.read()
    # img = cv2.flip(img, 1)  # mirror the image.
    """
    If I don't use flip method, 
    the pan tilt will follow the face direction.
    """
    if not success:
        print("Can't find camera")
        continue
    # print(img.shape)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)  # convert image to gray scale
    faces = faceCascade.detectMultiScale(gray, 1.1, 6)  # detect the face
    for x, y, w, h in faces:  # search for faces
        # sending coordinates to Arduino
        data = 'X{0:d}Y{1:d}'.format((x + w // 2), (y + h // 2))
        print(data)
        # Arduino.write(data.encode('utf-8'))  # encode data. Uncomment when arduino is connected
        # spot the center of the face with circle
        # cv2.circle(img, (x + w // 2, y + h // 2), 2, (0, 255, 0), 2)
        # Draw rectangle around face
        cv2.rectangle(img, (x, y), (x + w, y + h), (0, 0, 255), 3)

    # plot the squared region in the center of the screen
    # cv2.rectangle(frame, (640 // 2 - 30, 480 // 2 - 30),
    #               (640 // 2 + 30, 480 // 2 + 30),
    #               (255, 255, 255), 3)

    # Display image
    cv2.imshow("Image", img)
    if cv2.waitKey(1) & 0xFF == ord('q'):  # press q to exit
        break

# When done, release capture
cap.release()
cv2.destroyAllWindows()
